createSecrets: true

ssdAdapters:
  #enable: true
  enable: false
  files:
    dpm.yml: |
      props-override:
        adapters:
          dpm:
            token: __SSD_SA_DPM_TOKEN__
    fose.yml: |
      props-override:
        adapters:
          fose:
            token: __SSD_SA_FOSE_TOKEN__
    gitlab.yml: |
      props-override:
        adapters:
          gitlab:
            token: __SSD_SA_GITLAB_ACCESS_TOKEN__
    jcd.yml: |
      props-override:
        adapters:
          jenkins:
            login: __SSD_SA_JENKINS_CD_LOGIN__
            access-token: __SSD_SA_JENKINS_CD_ACCESS_TOKEN__
            jwt-token: __stub__
    jci.yml: |
      props-override:
        adapters:
          jenkins:
            login: __SSD_SA_JENKINS_CI_LOGIN__
            access-token: __SSD_SA_JENKINS_CI_ACCESS_TOKEN__
            jwt-token: __secret_data__
    jenkins-role-creation-template.groovy.template: |
      import jenkins.model.*
      import hudson.security.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*
      def authStrategy = Jenkins.instance.getAuthorizationStrategy()
      Jenkins jenkins = Jenkins.get()
      RoleBasedAuthorizationStrategy roleAuthStrategy = (RoleBasedAuthorizationStrategy) authStrategy
      [# th:each="roleDescription : ${roleDescriptions}"]
        roleAuthStrategy.doAddRole("projectRoles", "[(${roleDescription.roleName})]", "[(${roleDescription.permissions})]", "true", "[(${roleDescription.pattern})]", null);
        jenkins.save()
      [/]

      import jenkins.model.*
      import hudson.security.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*

      [# th:each="roleDescription : ${roleDescriptions}"]
      roleAuthStrategy.doAssignRole('projectRoles', '[(${roleDescription.roleName})]', '[(${roleDescription.roleName})]')
      [/]
    jenkins-role-creation-template-old.groovy.template: |
      import jenkins.model.*
      import hudson.security.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*
      def authStrategy = Jenkins.instance.getAuthorizationStrategy()
      Jenkins jenkins = Jenkins.get()
      RoleBasedAuthorizationStrategy roleAuthStrategy = (RoleBasedAuthorizationStrategy) authStrategy
      [# th:each="roleDescription : ${roleDescriptions}"]
        roleAuthStrategy.doAddRole("projectRoles", "[(${roleDescription.roleName})]", "[(${roleDescription.permissions})]", "true", "[(${roleDescription.pattern})]");
        jenkins.save()
      [/]

      import jenkins.model.*
      import hudson.security.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*

      [# th:each="roleDescription : ${roleDescriptions}"]
      roleAuthStrategy.doAssignRole('projectRoles', '[(${roleDescription.roleName})]', '[(${roleDescription.roleName})]')
      [/]
    ncd.yml: |
      props-override:
        adapters:
          nexus:
            login: __SSD_SA_NEXUS_CD_LOGIN__
            password: __SSD_SA_NEXUS_CD_PASSWORD__
    nci.yml: |
      props-override:
        adapters:
          nexus:
            login: __SSD_SA_NEXUS_CI_LOGIN__
            password: __SSD_SA_NEXUS_CI_PASSWORD__
    sonar.yml: |
      props-override:
        adapters:
          sonar:
            login: __SSD_SA_SONAR_LOGIN__
            password: __SSD_SA_SONAR_PASSWORD__
    load.yml: |
      props-override:
        adapters:
          load:
            access-token: __SSD_SA_LOAD_ACCESS_TOKEN__
            jwt-token: __SSD_SA_LOAD_JWT_TOKEN__
    jazz.yml: |
      props-override:
        adapters:
          jazz:
            secret-key: __SSD_SA_JAZZ_SECRET_KEY__
    sc.yml: |
      props-override:
        adapters:
          sc:
            secret-key: __SSD_SA_SOURCE_CONTROL_SECRET_KEY__
